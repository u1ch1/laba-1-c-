using System;

namespace FractionApp
{
    public class Fraction
    {
        private int numerator;
        private int denominator;

        public int Numerator
        {
            get => numerator;
            set
            {
                numerator = value;
                Simplify();
            }
        }

        public int Denominator
        {
            get => denominator;
            set
            {
                if (value == 0)
                {
                    throw new ArgumentException("Знаменатель не может быть равен 0");
                }
                denominator = value;
                Simplify();
            }
        }

        public double DecimalValue => (double)Numerator / Denominator;

        public Fraction(int numerator, int denominator)
        {
            if (denominator == 0)
            {
                throw new ArgumentException("Знаменатель не может быть равен 0");
            }
            this.numerator = numerator;
            this.denominator = denominator;
            Simplify();
        }

        private void Simplify()
        {
            int gcd = GCD(Math.Abs(numerator), Math.Abs(denominator));
            numerator /= gcd;
            denominator /= gcd;
        }

        private int GCD(int a, int b)
        {
            while (b != 0)
            {
                int temp = b;
                b = a % b;
                a = temp;
            }
            return a;
        }

        public static Fraction operator +(Fraction a, Fraction b)
        {
            return new Fraction(a.Numerator * b.Denominator + b.Numerator * a.Denominator, a.Denominator * b.Denominator);
        }

        public static Fraction operator -(Fraction a, Fraction b)
        {
            return new Fraction(a.Numerator * b.Denominator - b.Numerator * a.Denominator, a.Denominator * b.Denominator);
        }

        public static Fraction operator *(Fraction a, Fraction b)
        {
            return new Fraction(a.Numerator * b.Numerator, a.Denominator * b.Denominator);
        }

        public static Fraction operator /(Fraction a, Fraction b)
        {
            if (b.Numerator == 0)
            {
                throw new DivideByZeroException("Нельзя делить на ноль");
            }
            return new Fraction(a.Numerator * b.Denominator, a.Denominator * b.Numerator);
        }

        public override string ToString()
        {
            return $"{Numerator}/{Denominator}";
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            try
            {
                Console.WriteLine("Введите первую дробь в формате числитель/знаменатель:");
                Fraction f1 = ReadFractionFromConsole();

                Console.WriteLine("Введите вторую дробь в формате числитель/знаменатель:");
                Fraction f2 = ReadFractionFromConsole();

                Fraction sum = f1 + f2;
                Fraction difference = f1 - f2;
                Fraction product = f1 * f2;
                Fraction quotient = f1 / f2;

                Console.WriteLine($"f1 = {f1}");
                Console.WriteLine($"f2 = {f2}");
                Console.WriteLine($"f1 + f2 = {sum}");
                Console.WriteLine($"f1 - f2 = {difference}");
                Console.WriteLine($"f1 * f2 = {product}");
                Console.WriteLine($"f1 / f2 = {quotient}");

                Console.WriteLine($"Десятичное представление f1 = {f1.DecimalValue}");
                Console.WriteLine($"Десятичное представление f2 = {f2.DecimalValue}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ошибка: {ex.Message}");
            }
        }

        static Fraction ReadFractionFromConsole()
        {
            string input = Console.ReadLine();
            string[] parts = input.Split('/');

            if (parts.Length != 2 ||
                !int.TryParse(parts[0], out int numerator) ||
                !int.TryParse(parts[1], out int denominator))
            {
                throw new FormatException("Неверный формат ввода. Пожалуйста, введите дробь в формате числитель/знаменатель.");
            }

            return new Fraction(numerator, denominator);
        }
    }
}
